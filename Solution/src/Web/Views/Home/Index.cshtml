@using Univesp.CaminhoDoMar.ProjetoIntegrador.ApplicationCore.Enums
@model Univesp.CaminhoDoMar.ProjetoIntegrador.Web.Models.HomeModel
@{
    ViewData["Title"] = "Home";

}
<link href="~/css/dashboard.css?v=14032024.1604" rel="stylesheet" />


<div class="content-title">
    <h4 class="page-title">Bem vindo(a)</h4>
    <a id="buscarAlunos" href="/busca" class="btn btn-red" style="position:absolute; right: 0; top:10px; display:none;">Buscar alunos <i class="fas fa-search ml-2"></i></a>
</div>

<div class="dash">
    <div class="cards-wrapper">
        <section class="card-dashboard" id="total-alunos">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count() </h5>
                <p class="p-1">Total de Alunos Matriculados</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-ativos">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.Id_Status_Matricula == (int)EStatus_Matricula.ATIVA) </h5>
                <p class="p-1">Total de Alunos com matriculas ativas</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-pausados">
             <i class="fas fa-user card-icon"></i>
             <div class="card-data">
                 <h5> @Model.Alunos.Count(c => c.Id_Status_Matricula == (int)EStatus_Matricula.TRANCADA) </h5>
                 <p class="p-1">Total de Alunos com matriculas trancadas</p>
             </div>
        </section> 
        <section class="card-dashboard" id="total-alunos-concluidos">
                     <i class="fas fa-user card-icon"></i>
                     <div class="card-data">
                         <h5> @Model.Alunos.Count(c => c.Id_Status_Matricula == (int)EStatus_Matricula.CONCLUIDA) </h5>
                         <p class="p-1">Total de Alunos com matriculas concluídas</p>
                     </div>
        </section> 
        <section class="card-dashboard" id="total-alunos-cancelados">
             <i class="fas fa-user card-icon"></i>
             <div class="card-data">
                 <h5> @Model.Alunos.Count(c => c.Id_Status_Matricula == (int)EStatus_Matricula.CANCELADA) </h5>
                 <p class="p-1">Total de Alunos com matriculas canceladas</p>
             </div>
        </section>         
        <section class="card-dashboard" id="total-alunos-escola-publica">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.EnsinoMedio_Escola_Publica) </h5>
                <p class="p-1">Alunos que cursaram ensino médio em escola pública</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-faculdade">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.Cursou_Faculdade) </h5>
                <p class="p-1">Alunos que cursaram faculdade previamente</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-professores">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.Professor) </h5>
                <p class="p-1">Alunos que também são professores</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-servidores-publicos">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.Servidor_Publico) </h5>
                <p class="p-1">Alunos que também são servidores públicos</p>
            </div>
        </section>
        <section class="card-dashboard" id="total-alunos-sptrans">
            <i class="fas fa-user card-icon"></i>
            <div class="card-data">
                <h5> @Model.Alunos.Count(c => c.Cadastro_SpTrans) </h5>
                <p class="p-1">Alunos que pediram bilhete de estudante</p>
            </div>
        </section>
    </div>


    @* <div id="graphs-section" class="row"> *@
    @*     <section class="col-lg-6 col-12 my-2 graph-section"> *@
    @*         <div class="graph-titles"> *@
    @*             <h6 id="progresso_ciclo_title" class="font-weight-bold graph-title sticky-top graph-selected"> *@
    @*                 Progresso do ciclo *@
    @*             </h6> *@
    @*         </div> *@
    @*         <div class="graph-container" id="valor_por_regional_container"> *@
    @*             <canvas id="progresso_ciclo"></canvas> *@
    @*         </div> *@
    @*     </section> *@
    @* *@
    @*     <section class="col-lg-6 col-12 my-2 graph-section"> *@
    @*         <div class="graph-titles"> *@
    @*             <h6 id="progresso_filial_title" class="font-weight-bold graph-title sticky-top graph-selected"> *@
    @*                 Progresso por Unidade *@
    @*             </h6> *@
    @*         </div> *@
    @*         <div class="graph-container" id="progresso_filial_container"> *@
    @*             <canvas id="progresso_filial"></canvas> *@
    @*         </div> *@
    @*     </section> *@
    @* *@
    @*     <section class="col-lg-6 col-12 my-2 graph-section"> *@
    @*         <div class="graph-titles"> *@
    @*             <h6 id="progresso_filial_title" class="font-weight-bold graph-title sticky-top graph-selected"> *@
    @*                 Renovação Cadastral *@
    @*             </h6> *@
    @*         </div> *@
    @*         <div class="graph-container" id=""> *@
    @*             <canvas id="renovacao_cadastral"></canvas> *@
    @*         </div> *@
    @*     </section> *@
    @* *@
    @*     <section class="col-lg-6 col-12 my-2 graph-section"> *@
    @*         <div class="graph-titles"> *@
    @*             <h6 id="progresso_filial_title" class="font-weight-bold graph-title sticky-top graph-selected"> *@
    @*                 Comparativo de Envio % *@
    @*             </h6> *@
    @*         </div> *@
    @*         <div class="graph-container" id="progresso_filial_container"> *@
    @*             <canvas id="comparativo_envio"></canvas> *@
    @*         </div> *@
    @*     </section> *@
    @* </div> *@

</div>

<script src="~/lib/chartjs/dist/chart.min.js"></script>
<script src="~/lib/chartjs/dist/custom_plugins.js"></script>
<script src="~/lib/chartjs/dist/chartjs-plugin-datalabels.min.js"></script>
<script src="~/lib/palette.min.js"></script>

<style>
    @@media screen and (min-width: 768px) {
        #buscarAlunos {
            display: block !important;
        }
    }

    .dash {
        display: flex;
    }

    .side-data {
        font-size: 1rem;
    }

    .cards-wrapper {
        display: flex;
        flex-wrap: wrap;
        /*flex: 0 0 300px;*/
    }

    #graphs-section{
        flex-grow:1;
    }

    .card-dashboard {
        margin: 0;
        margin-bottom: 1rem;
        flex: 0 0 calc(100%);
        border-radius: .5rem;
    }
</style>

<script>
    loadFormFromQueryString();
    charts = {}
    meses = ["JAN", "FEV", "MAR", "ABR", "MAI", "JUN", "JUL", "AGO", "SET", "OUT", "NOV", "DEZ"];
    const lineColors = ['rgb(240, 125, 0)', 'rgb(0, 158, 190)', 'rgb(112,132,10)', 'rgb(89, 89, 89)'];
    let idxColors = 0;

    with (document.getElementsByTagName('main')[0]) {
        classList.remove("container")
        classList.add("container-fluid");
    }

    const showGraphHideGraph = (show, hide) => {
        titleHide = document.getElementById(`${hide}_title`).classList.remove('graph-selected');
        containerHide = document.getElementById(`${hide}_container`).style.display = 'none';

        titleShow = document.getElementById(`${show}_title`).classList.add('graph-selected');
        containerShow = $(`#${show}_container`).show();
    }

    function criaGraficoDonut(id_canvas, graphData, insideText) {
        const data = {
            labels: graphData.labels,
            datasets: [{
                label: '',
                data: graphData.values,
                backgroundColor: [
                    'rgba(255,0,0,0.5)',
                    'rgba(249,176,0,0.6)',
                    'rgba(189, 196, 22, 0.6)',
                    'rgba(0, 158, 150,0.6)',
                    'rgba(112,132,10,0.6)',
                    'rgba(122,122,122,0.6)',
                ],
                hoverOffset: 4,
                cutout: "45%"
            }],
        };

        let total = data.datasets[0].data.reduce((prev, curr) => prev + curr, 0);

        const config = {
            type: 'pie',
            data: data,
            plugins: [ChartDataLabels, {
                id: 'text',
                beforeDraw: function (chart, a, b) {
                    var width = chart.width,
                        height = chart.height,
                        ctx = chart.ctx;

                    ctx.restore();
                    var fontSize = "18px";
                    ctx.font = fontSize + " sans-serif";
                    ctx.textBaseline = "middle";

                    var text = insideText.toString().replace('.', ',') + "%"
                    textX = Math.round((width - ctx.measureText(text).width) / 2),
                        textY = (height / 2) + 29;

                    ctx.fillText(text, textX, textY);
                    ctx.save();
                }
            }],
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    datalabels: {
                        labels: {
                            name: {
                                align: 'top',
                                font: { size: 0 },
                                color: "#000",
                                formatter: function (value, ctx) {
                                    percentage = value / total;
                                    if (percentage < 0.05)
                                        return "";
                                    return ctx.chart.data.labels[ctx.dataIndex].slice(0, 20);
                                }
                            }
                        }
                    },
                    legend: {
                        display: true
                    },
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem, data) => {
                                label = tooltipItem.label;
                                value = tooltipItem.parsed;
                                if (label.length > 30)
                                    return [label.slice(0, 30), label.slice(30) + ` : ${value.milharBRL()}`]
                                else
                                    return label + ` : ${value.milharBRL()}`;
                            }
                        }
                    }
                },
            }
        };

        var elemGraph = document.getElementById(id_canvas);
        charts[id_canvas] = new Chart(elemGraph, config);
    }

    function criaGraficoLinha(id_canvas, graphData) {
        const data = {
            labels: meses,
            datasets: []
        };

        for (x of graphData) {

            data.datasets.push({
                label: x.ciclo,
                data: x.progresso.map(p => p.renovados_Porcentagem),
                borderColor: lineColors[idxColors],
                tension: 0.1
            });

            idxColors = (idxColors + 1) % lineColors.length;
        }


        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                beginAtZero: true,
                scales: {
                    x: {

                        grid: {
                            display: false,
                        },
                    },
                    y: {
                        suggestedMin: 0,
                        grid: {
                            color: "#00000008",
                        },
                        ticks: {
                            callback: function (value) {
                                return value.toFixed(0) + '%';
                            },
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Percentage',
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true
                    },
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem, data) => {
                                label = tooltipItem.dataset.label;
                                value = tooltipItem.parsed;

                                return label + ": " + value.y.toFixed(2) + "%"
                            },
                        }
                    },
                }
            },
        };

        var elemGraph = document.getElementById(id_canvas);
        charts[id_canvas] = new Chart(elemGraph, config);
    }

    function criaGraficoBarraVertical(id_canvas, graphData) {

        //convertendo pra porcentagem
        for (let i = 0; i < graphData.labels.length; i++) {
            vl = graphData.values[i];
            pend = graphData.pendentes[i];
            tot = vl + pend;
            graphData.values[i] = (vl / tot)*100;
            graphData.pendentes[i ] = (pend / tot)*100;
        }

        const data = {
            labels: graphData.labels,
            datasets: [{
                label: 'Finalizados',
                data: graphData.values,
                borderColor: "rgb(112,132,10)",
                backgroundColor: "rgba(112,132,10, .7)",
                borderWidth: 2
            },
            {
                label: 'Pendentes',
                data: graphData.pendentes,
                borderColor: "#F99000",
                backgroundColor: "#F9B000",
                borderWidth: 2
            }]
        };

        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,                
                maintainAspectRatio: false,
                scales: {
                    x: {
                        stacked: true,
                        grid: {
                            display: false,
                        },
                    },
                    y: {
                        stacked: true,
                        min: 0,
                        max: 100,
                        type: 'linear',
                        grace: "0%",
                        grid: {
                            color: "#00000008",
                        },
                        ticks: {
                            precision: 0,
                            callback: function (value) {
                                return value.toFixed(0) + '%';
                            },
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Percentage',
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true
                    },
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem, data) => {
                                label = tooltipItem.dataset.label;
                                value = tooltipItem.parsed;

                                return label + ": " + value.y.toFixed(2) + "%"
                            },
                        }
                    },
                }
            },
        };

        var elemGraph = document.getElementById(id_canvas);
        charts[id_canvas] = new Chart(elemGraph, config);
    }
    
    function criaGraficoBarraVerticalRenovacaoCadastral(id_canvas, graphData) {
        percentages = [];
        for (let i = 0; i < graphData.renovados.length; i++) {
            percentages.push((graphData.renovados[i] / graphData.values[i]) * 100);
        }

        const data = {
            labels: graphData.labels,
            datasets: [{
                label: 'Alunos a Renovar',
                data: graphData.values,
                borderColor: "#F99000",
                backgroundColor: "#F9B000",
                borderWidth: 2
            },{
                label: 'Alunos Renovados',
                data: graphData.renovados,
                borderColor: "rgb(112,132,10)",
                backgroundColor: "rgba(112,132,10, .7)",
                borderWidth: 2
            },{
                label: '% Renovados',
                data: percentages,
                borderColor: "rgb(255,0,0)",
                backgroundColor: "rgba(255,0,0, .7)",
                borderWidth: 2
            }]
        };
        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,                
                maintainAspectRatio: false,
                scales: {
                    x: {
                        grid: {
                            display: false,
                        },
                    },
                    y: {
                        grid: {
                            color: "#00000008",
                        },
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem, data) => {
                                label = tooltipItem.dataset.label;
                                value = tooltipItem.parsed;
                                if (label.length > 30)
                                    return [label.slice(0, 30), label.slice(30) + ` : ${value.y.milharBRL()}`]
                                else
                                    return tooltipItem.dataset.label + ` : ${value.y.milharBRL()}`;
                                
                            },
                        }
                    },
                    legend: {
                        display: true
                    },
                }
            },
        };

        var elemGraph = document.getElementById(id_canvas);
        charts[id_canvas] = new Chart(elemGraph, config);
    }

    const obtemDadosDashboard = () => {

        $.ajax({type: "POST",
            url: `/dados`,
            contentType: "application/json",
            data: JSON.stringify("ok"),
        }).done(function (data) {
            for (key in charts) {
                        if (charts[key] != null) charts[key].destroy();
            }
                    
            criaGraficoBarraVertical("progresso_filial",
            {
                labels: data.progressoUnidade.labels,
                values: data.progressoUnidade.values,
                pendentes: data.progressoUnidade.pendentes,
            });
            
            var percentage = Math.round(
                ((data.progressoCicloEnviadoIncompleto + data.progressoCicloEnviadoCompleto) /
                    (data.progressoCicloPendentes + data.progressoCicloNaoRenovar +
                    data.progressoCicloRecebidoIncompleto + 
                    data.progressoCicloRecebidoCompleto + 
                    data.progressoCicloEnviadoIncompleto + 
                        data.progressoCicloEnviadoCompleto)) * 10000)/100;


            if (isNaN(percentage)){
                percentage = 0;
            }
            criaGraficoDonut("progresso_ciclo",
            {
                labels: ["Pendentes", "Recebido incompleto", "Recebido completo", "Enviado incompleto", "Enviado completo", "Não renovar"],
                values: [data.progressoCicloPendentes, data.progressoCicloRecebidoIncompleto, data.progressoCicloRecebidoCompleto, data.progressoCicloEnviadoIncompleto, data.progressoCicloEnviadoCompleto, data.progressoCicloNaoRenovar],
            }, percentage);

            criaGraficoBarraVerticalRenovacaoCadastral("renovacao_cadastral",
            {
                labels: data.progressoCiclo.labels,
                values: data.progressoCiclo.values,
                renovados: data.progressoCiclo.renovados,
                });

            criaGraficoLinha('comparativo_envio', data.renovados);

        }).fail(function (xhr, status, error) {
            if (xhr.status == 400) {
                if (xhr.responseText !== "") {
                    toastr.error(xhr.responseText);
                    return;
                }
            }
            toastr.error("Não foi possível gerar os dados do dashboard.");
            console.log(xhr.responseText);
        });

    }

    // obtemDadosDashboard();

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>